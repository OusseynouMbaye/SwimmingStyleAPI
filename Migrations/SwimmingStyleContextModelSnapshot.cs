// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SwimmingStyleAPI.DbContexts;

#nullable disable

namespace SwimmingStyleAPI.Migrations
{
    [DbContext(typeof(SwimmingStyleContext))]
    partial class SwimmingStyleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.7");

            modelBuilder.Entity("SwimmingStyleAPI.Entitites.StatsSwimmingstyleEntities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Endurance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SwimmingStyleEntitiesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SwimmingStyleEntitiesId");

                    b.ToTable("StatsSwimmingStyles");
                });

            modelBuilder.Entity("SwimmingStyleAPI.Entitites.SwimmingStyleEntities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SwimmingStyles");
                });

            modelBuilder.Entity("SwimmingStyleAPI.Entitites.StatsSwimmingstyleEntities", b =>
                {
                    b.HasOne("SwimmingStyleAPI.Entitites.SwimmingStyleEntities", "SwimmingStyleEntitie")
                        .WithMany("StatsOfSwimmingStyle")
                        .HasForeignKey("SwimmingStyleEntitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SwimmingStyleEntitie");
                });

            modelBuilder.Entity("SwimmingStyleAPI.Entitites.SwimmingStyleEntities", b =>
                {
                    b.Navigation("StatsOfSwimmingStyle");
                });
#pragma warning restore 612, 618
        }
    }
}
